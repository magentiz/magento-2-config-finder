<div class="admin__data-grid-bulk-barcode-message-wrap" style="display:none;margin-top: 10px;">
    <div class="message message-error error">

    </div>
</div>
<div class="admin__data-grid-bulk-barcode-wrap" style="display: none; padding: 10px 0">
    <input type="file" id="gridBarcodefileUpload" style="display: none;" />
    <button id="grid_import_bulk_barcode" class="admin__action-import" type="button">
        <span>Import Bulk Barcode</span>
    </button>
    <div class="admin__form-field" style="width: 100%">
        <label class="admin__form-field-label">
            <span>Barcode</span>
        </label>
        <div class="admin__form-field-control">
            <textarea class="admin__control-text" type="text" name="barcode" id="filter-csv" placeholder="Barcode separator by new line or comma (,)"></textarea>
        </div>
        <div class="admin__data-grid-filters-footer" style="display:block;">
            <div class="admin__footer-main-actions">
                <button class="action-secondary" type="button" id="cancel-apply-filter">
                    <span>Cancel</span>
                </button>
                <button class="action-secondary" type="button" id="grid-apply-filter">
                    <span>Apply Filters</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
	require([
        "jquery",
        "Magento_Ui/js/modal/alert",
        "xlsx",
        "mage/backend/notification",
    ], function ($, alertModal, XLSX, notification){
        var alert = function(msg, title) {
            var modalConfig = { content: msg };
            if (typeof title !== 'undefined') {
                modalConfig['title'] = title;
            }
            alertModal(modalConfig);
        };
        var csvStringToArray = function(strData) {
            const objPattern = new RegExp(("(\\,|\\r?\\n|\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\,\\r\\n]*))"),"gi");
            let arrMatches = null, arrData = [[]];
            while (arrMatches = objPattern.exec(strData)) {
                if (arrMatches[1].length && arrMatches[1] !== ",") {
                    arrData.push([]);
                }
                arrData[arrData.length - 1].push(arrMatches[2] ?
                    arrMatches[2].replace(new RegExp( "\"\"", "g" ), "\"") :
                    arrMatches[3]);
            }
            return arrData;
        };
        function showGridMessageError (barcode)
        {
            if (!barcode || !barcode.length) {
                return;
            }
            let message = "These barcode items "+barcode.join(",")+" is not in list, please check again";
            $("body").notification("clear").notification("add", {
                error: true,
                message: message,
                insertMethod: function (message) {
                    var $wrapper = $("<div/>").html(message);
                    if($("#messages").length) {
                        $("#messages").after($wrapper);
                    } else {
                        $('.page-columns').before($wrapper);
                    }
                }
            });
        }
        function getObjectGrid()
        {
            return <?= $block->getData("object_grid_name") ?>;
        }
        var gridFilter = {
            keyReset: "<?= $block->getData("key_reset") ?>",
            doFilter: function(barcode)
            {
                $("body").find("#messages").remove();
                $("body").notification("clear");
                barcode = barcode.split(/[,\n\t]+/)
                    .map((v) => v.trim())
                    .filter((v) => v)
                    .join(",");
                var _this = this;
                if(!barcode)
                {
                    barcode = _this.keyReset;
                }
                getObjectGrid().setValueToFilter("scan_barcode", barcode);
                getObjectGrid().setValueToFilter("is_bulk_barcode_import", 1);
                getObjectGrid().barcode = barcode || '';
                getObjectGrid().doFilter(_this.onSuccessCallback.bind(getObjectGrid()));
            },
            onSuccessCallback: function()
            {
                var _this = this;
                var barcode = _this.barcode.split(",");
                $("textarea#filter-csv").val(barcode.join("\n"));
                var selectAll = 1;
                $(document).ajaxStop(function() {
                    if(selectAll) {
                        selectAll = 0;
                        <?= $block->getData("object_grid_massaction_name") ?>.selectVisible();
                    }
                });
            },
        };
        var importBulkBarcode = {
            inputFile: $("#gridBarcodefileUpload"),
            buttonSearch: $("#grid_import_bulk_barcode"),
            columnFilter: $("#<?= $block->getData("grid_column_filter") ?>"),
            gridTable: $("#<?= $block->getData("grid_table") ?>"),
            keyReset: "<?= $block->getData("key_reset") ?>",
            search: function(){
                var _this = this;
                _this.buttonSearch.bind("click", function (e) {
                    e.preventDefault();
                    _this.inputFile.trigger("click");
                });
                _this.fileUploadChange();
            },
            fileUploadChange: function()
            {
                var _this = this;
                _this.inputFile.on("change", function() {
                    if (typeof (FileReader) === "undefined") {
                        alert("This browser does not support HTML5.");
                    }
                    var fileName = $(this).val().toLowerCase();
                    var extension = fileName.substr( (fileName.lastIndexOf('.') +1) );
                    var allowExtensions = 'xls|xlsx|csv'.split('|');
                    if (allowExtensions.indexOf(extension) < 0) {
                        alert("Please upload a valid csv|xlsx|xls file.");
                    }
                    var file = this.files[0];
                    switch(extension) {
                      case 'xlsx':
                      case 'xls':
                        _this.xlsxType(file);
                        break;
                      default:
                        _this.csvType(file);
                    }
                });
            },
            csvType: function(fileBlob)
            {
                var _this = this;
                var barcode = [ ];
                var reader = new FileReader();
                reader.onload = function (e) {
                    var rows = csvStringToArray(e.target.result);
                    for (var i = 0; i < rows.length; i++) {
                        var cells = rows[i];
                        for (var j = 0; j < cells.length; j++) {
                            if (cells[j]) {
                                barcode.push(cells[j].trim());
                            }
                        }
                    }
                    _this.doFilter(barcode.join(','));
                };
                reader.readAsText(fileBlob);
            },
            xlsxType: function(fileBlob)
            {
                var _this = this;
                var barcode = [];
                var reader = new FileReader();
                reader.onload = function (e) {
                    var data = e.target.result;
                    var workbook = XLSX.read(data, { type: 'binary' });
                    var sheet_name_list = workbook.SheetNames;
                    var cnt = 0;
                    window.workbook = workbook;
                    sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/
                        /*Convert the cell value to Json*/
                        var exceljson = XLSX.utils.sheet_to_json(workbook.Sheets[y], {header:"A"});
                         if (exceljson.length > 0 && cnt == 0) {
                            for (var i = 0; i < exceljson.length; i++) {
                                var rowHash = exceljson[i];
                                for (var key in rowHash) {
                                    if (rowHash.hasOwnProperty(key)) {
                                        barcode.push(String(rowHash[key]).trim());
                                    }
                                }
                            }
                            cnt++;
                         }
                    });
                    _this.doFilter(barcode.join(','));
                };
                reader.readAsArrayBuffer(fileBlob);
            },
            doFilter: function(barcode)
            {
                gridFilter.doFilter(barcode);
            }
        };

        var barcodeFilter = {
            btnFilter: $("#grid-apply-filter"),
            btnCancel: $("#cancel-apply-filter"),
            inputFilter: $("#filter-csv"),
            btnShow: $(".bulk-filter-barcode-btn"),
            filter: function()
            {
                var _this = this;
                _this.btnFilter.on("click", function(){
                    var barcode = _this.inputFilter.val();
                    if(!barcode)
                    {
                        _this.hideBoxBulkBarcodeScan();
                        return;
                    }
                    _this.doFilter(barcode);

                });
                _this.btnCancel.on("click", function(){
                    _this.hideBoxBulkBarcodeScan();
                });
                _this.btnShow.on("click", function(){
                    $(".admin__data-grid-bulk-barcode-wrap").toggle();
                    $("body").trigger('massSelectWrapUpdated');
                });
            },
            hideBoxBulkBarcodeScan:function()
            {
                $(".admin__data-grid-bulk-barcode-wrap").hide();
                $("body").trigger('massSelectWrapUpdated');
            },
            showBoxBulkBarcodeScan:function()
            {
                $(".admin__data-grid-bulk-barcode-wrap").show();
                $("body").trigger('massSelectWrapUpdated');
            },
            doFilter: function(barcode)
            {
                gridFilter.doFilter(barcode);
            }
        };

		$(function () {
            'use strict';
            importBulkBarcode.search();
            barcodeFilter.filter();
            <?php if($block->getData("barcode_list_wrong") && $block->getData("show_message")):?>
            var barcodeWrong = <?= json_encode($block->getData("barcode_list_wrong"));?>;
            // need active notification lib before run showGridMessageError()
            $('body').notification();
            showGridMessageError(barcodeWrong)
            $("body").trigger('massSelectWrapUpdated');
            <?php endif;?>
            <?php if($block->getData("current_barcode_scan")):?>
            var barcodeScan = <?= json_encode($block->getData("current_barcode_scan"));?>;
            $("textarea#filter-csv").val(barcodeScan.join(","));
            <?php endif;?>
        });
    });
</script>
